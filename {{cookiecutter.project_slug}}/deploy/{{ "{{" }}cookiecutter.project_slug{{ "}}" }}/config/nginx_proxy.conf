{% raw %}
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name {{ cookiecutter.server_name }};
    return 302 https://$server_name$request_uri;
}

server {
        listen 443 ssl http2 default_server;
        listen [::]:443 ssl http2 default_server;

        server_name {{ cookiecutter.server_name }};
        ssl_trusted_certificate /etc/nginx/certs/root-ca.pem;
        ssl_certificate /etc/nginx/certs/frontend.pem;
        ssl_certificate_key /etc/nginx/certs/frontend-key.pem;

        # from https://cipherli.st/
        # and https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html

        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers on;
        ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
        ssl_ecdh_curve secp384r1;
        ssl_session_cache shared:SSL:10m;
        ssl_session_tickets off;
        ssl_stapling on;
        ssl_stapling_verify on;
        resolver 127.0.0.11 valid=300s;
        resolver_timeout 5s;
        # Disable preloading HSTS for now.  You can use the commented out header line that includes
        # the "preload" directive if you understand the implications.
        #add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
        add_header Strict-Transport-Security "max-age=63072000; includeSubdomains";
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;

        ssl_dhparam /etc/nginx/certs/dhparam.pem;

	location /search/app {

             set $searchui_upstream https://search-ui;

             proxy_pass $searchui_upstream;
             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
             proxy_set_header X-Forwarded-Proto $scheme;
             proxy_set_header X-Forwarded-Port $server_port;
             rewrite ^/search/app/(.*)$ /$1 break;
             proxy_ssl_trusted_certificate /etc/nginx/certs/root-ca.pem;
             proxy_ssl_verify on;
             proxy_ssl_verify_depth 2;
             proxy_ssl_session_reuse on;
     }

	location /search/api {

             set $searchapi_upstream https://search-api;

             proxy_pass $searchapi_upstream;
             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
             proxy_set_header X-Forwarded-Proto $scheme;
             proxy_set_header X-Forwarded-Port $server_port;
             rewrite ^/search/api/(.*)$ /$1 break;
             proxy_ssl_trusted_certificate /etc/nginx/certs/root-ca.pem;
             proxy_ssl_verify on;
             proxy_ssl_verify_depth 2;
             proxy_ssl_session_reuse on;
     }

	location /kibana/ui {

             set $kibana_upstream https://kibana:5601;

             proxy_pass $kibana_upstream;
             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
             proxy_set_header X-Forwarded-Proto $scheme;
             proxy_set_header X-Forwarded-Port $server_port;
             #rewrite ^/kibana/ui/(.*)$ /$1 break;
             proxy_ssl_trusted_certificate /etc/nginx/certs/root-ca.pem;
             proxy_ssl_verify on;
             proxy_ssl_verify_depth 2;
             proxy_ssl_session_reuse on;
	}

	location /euler/api {

             set $eulerapi_upstream https://euler:8443;

             proxy_pass $eulerapi_upstream;
             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
             proxy_set_header X-Forwarded-Proto $scheme;
             proxy_set_header X-Forwarded-Port $server_port;
             #proxy_set_header X-Forwarded-Prefix /euler/api;
             rewrite ^/euler/api/(.*)$ /$1 break;
             proxy_ssl_trusted_certificate /etc/nginx/certs/root-ca.pem;
             proxy_ssl_verify on;
             proxy_ssl_verify_depth 2;
             proxy_ssl_session_reuse on;
     }

	location = /search {
		return 301 https://{{ cookiecutter.server_name }}/search/app;
	}

	location = /kibana {
		return 301 https://{{ cookiecutter.server_name }}/kibana/ui;
	}

	location = /kibana/ {
		return 301 https://{{ cookiecutter.server_name }}/kibana/ui;
	}

	location = /euler/ {
		return 301 https://{{ cookiecutter.server_name }}/euler/api;
	}

	location = / {
		return 301 https://{{ cookiecutter.server_name }}/search/app;
	}
}
{% endraw %}